// Generated by CoffeeScript 1.6.3
var Pivot, Sequencer, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

if ((typeof exports !== "undefined" && exports !== null) && module && module.exports) {
  Pivot = require('the-pivot');
}

Sequencer = Sequencer || {};

Sequencer.ImageLoader = (function(_super) {
  __extends(ImageLoader, _super);

  function ImageLoader(path, frame) {
    var img,
      _this = this;
    img = new Image();
    img.src = path;
    if (img.dataset != null) {
      img.dataset.frame = frame;
    } else {
      img.setAttribute('data-frame', frame);
    }
    img.onload = function() {
      return _this.trigger('complete', img);
    };
  }

  return ImageLoader;

})(Pivot);

Sequencer.Player = (function(_super) {
  __extends(Player, _super);

  Player.prototype.chrome = window.navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

  Player.prototype.el = null;

  Player.prototype.current_frame = -1;

  Player.prototype.mode = null;

  Player.prototype.cssbackgroundsize = false;

  Player.prototype.dev = true;

  Player.prototype.tag_type = 'div';

  Player.prototype.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.dev) {
      return console.log.apply(console, args);
    }
  };

  function Player(el) {
    this.update = __bind(this.update, this);
    this.set_size = __bind(this.set_size, this);
    this.set_mode = __bind(this.set_mode, this);
    this.load = __bind(this.load, this);
    this._resize = __bind(this._resize, this);
    this._update = __bind(this._update, this);
    this._setup = __bind(this._setup, this);
    this._load_images = __bind(this._load_images, this);
    this.log = __bind(this.log, this);
    this.el = document.getElementById(el);
  }

  /*
  	Load images from the data
  */


  Player.prototype._load_images = function() {
    var ext, file_ext, frame, loaded, loader, on_load_complete, path, total_frames, _i, _j, _len, _ref, _results,
      _this = this;
    this._cache = [];
    loaded = 0;
    total_frames = this.get_total_frames();
    on_load_complete = function(img) {
      var id;
      if (img.dataset != null) {
        id = img.dataset.frame;
      } else {
        id = img.getAttribute('data-frame');
      }
      _this._cache[id] = img;
      if (loaded === total_frames) {
        _this._setup();
      }
      return loaded++;
    };
    _results = [];
    for (frame = _i = 0; 0 <= total_frames ? _i <= total_frames : _i >= total_frames; frame = 0 <= total_frames ? ++_i : --_i) {
      file_ext = this.data.extensions[0];
      if (this.chrome) {
        _ref = this.data.extensions;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          ext = _ref[_j];
          if (ext === 'webp') {
            file_ext = ext;
          }
        }
      }
      path = this.path + '/' + frame + '.' + file_ext;
      loader = new Sequencer.ImageLoader(path, frame);
      _results.push(loader.on('complete', on_load_complete));
    }
    return _results;
  };

  Player.prototype._create_frame = function(src) {
    var el;
    if (this.cssbackgroundsize) {
      el = document.createElement('div');
      el.style.position = 'absolute';
      el.style.width = '100%';
      el.style.height = '100%';
      if (src) {
        el.style.backgroundImage = "url(" + src + ")";
      }
      el.style.backgroundRepeat = "no-repeat";
      el.style.visibility = 'hidden';
    } else {
      el = document.createElement('img');
      el.style.position = 'absolute';
      el.style.width = '100%';
      el.style.height = '100%';
    }
    return el;
  };

  /*
  	Setup the container
  */


  Player.prototype._setup = function() {
    var el, hd_frame, height, i, img, width, _i, _len, _ref;
    this.container = document.createElement('div');
    this.container.style.position = 'absolute';
    this.el.appendChild(this.container);
    width = this.data.frame.width * this.data.frame.scale;
    height = this.data.frame.height * this.data.frame.scale;
    this._frames = [];
    if (this.cssbackgroundsize) {
      _ref = this._cache;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        img = _ref[i];
        el = this._create_frame(img.src);
        this._frames.push(el);
        this.container.appendChild(el);
      }
      this._cache = null;
    } else {
      el = this._create_frame();
      this.tag_type = 'img';
      this.container.appendChild(el);
      this.img_el = $(el);
    }
    hd_frame = this._create_frame();
    this.container.appendChild(hd_frame);
    this._hd_frame = $(hd_frame);
    this._hd_frame.addClass('hd_frame');
    this.set_size(width, height);
    return this.trigger('setup_complete', this);
  };

  Player.prototype._update = function() {
    var frame;
    frame = this.mode.get_frame();
    if (frame !== this.current_frame) {
      this.hide_hd_frame();
      if (this.cssbackgroundsize) {
        if (this._frames[this.current_frame] != null) {
          this._frames[this.current_frame].style.visibility = 'hidden';
          this._frames[this.current_frame].style.zIndex = 0;
        }
        this.current_frame = frame;
        this._frames[this.current_frame].style.visibility = 'visible';
        return this._frames[this.current_frame].style.zIndex = 1;
      } else {
        this.current_frame = frame;
        return this.img_el.attr('src', $(this._cache[this.current_frame]).attr('src'));
      }
    }
  };

  Player.prototype._resize = function() {
    var $window;
    $window = $(window);
    return this.set_size($window.width(), $window.height());
  };

  /*----------------------------------------------
  	@public
  */


  Player.prototype.load = function(path, frames) {
    var _this = this;
    this.path = path;
    return $.ajax({
      url: this.path + '/' + frames,
      complete: function(data) {
        _this.data = JSON.parse(data.responseText);
        return _this._load_images();
      },
      error: function(error) {}
    });
  };

  Player.prototype.noload = function(data, _cache) {
    this.data = data;
    this._cache = _cache;
    return this._setup();
  };

  /*
  	Set the playback mode
  */


  Player.prototype.set_mode = function(mode) {
    var _ref;
    if ((_ref = this.mode) != null) {
      _ref.off('update', this.update);
    }
    this.mode = mode;
    return this.mode.on('update', this.update);
  };

  Player.prototype.set_size = function(width, height) {
    var $frames;
    this.width = width;
    this.height = height;
    this.el.style.width = this.width + 'px';
    this.el.style.height = this.height + 'px';
    this.container.style.width = this.el.style.width;
    this.container.style.height = this.el.style.height;
    $frames = $(this.container).find(this.tag_type);
    return Sequencer.util.resize($frames, this.data.frame.width, this.data.frame.height, this.width, this.height, this.cssbackgroundsize);
  };

  Player.prototype.update = function() {
    if (this.mode == null) {
      return;
    }
    return this._update();
  };

  /*
  	Enable the automatic resizing of the sequencer container on window resize
  */


  Player.prototype.enable_automatic_resize = function() {
    $(window).on('resize', this._resize);
    return this._resize();
  };

  /*
  	Disable the automatic resizing of the sequencer container on window resize
  */


  Player.prototype.disable_automatic_resize = function() {
    return $(window).off('resize', this._resize);
  };

  /*
  	Show a high quality frame
  	@param [Image] img
  */


  Player.prototype.show_hd_frame = function(img) {
    var src;
    if (this.cssbackgroundsize) {
      src = "url(" + img.src + ")";
      this._hd_frame.css('background-image', src);
    } else {
      this._hd_frame.attr('src', img.src);
    }
    TweenLite.to(this._hd_frame, 0.3, {
      autoAlpha: 1
    });
    return this._hd_frame.css({
      'z-index': 10
    });
  };

  /*
  	Hide the high quality frame
  */


  Player.prototype.hide_hd_frame = function() {
    TweenLite.killTweensOf(this._hd_frame);
    return this._hd_frame.css({
      'visibility': 'hidden',
      'opacity': 0,
      'z-index': 0
    });
  };

  /*
  	Return the number of frames in the sequence
  	@return [Int]
  */


  Player.prototype.get_total_frames = function() {
    return this.data.total_frames - 1;
  };

  Player.prototype.destroy = function() {
    return this.el.innerHTML = '';
  };

  return Player;

})(Pivot);

Sequencer.Blender = (function(_super) {
  __extends(Blender, _super);

  function Blender() {
    this._update = __bind(this._update, this);
    _ref = Blender.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Blender.prototype._update = function() {
    var distance, dx, frame, i, normalise, opacity, percent, position, _i, _ref1, _results;
    frame = this.mode.get_frame();
    percent = frame / this.get_total_frames();
    percent = Number(percent.toFixed(2));
    _results = [];
    for (i = _i = 0, _ref1 = this.get_total_frames(); 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      position = i * (1 / this.get_total_frames());
      dx = percent - position;
      distance = Math.sqrt(dx * dx);
      if (distance <= 0.1) {
        normalise = distance * 10;
        opacity = 1 - normalise;
        this._frames[i].style.visibility = 'visible';
        this._frames[i].style.zIndex = 1;
        _results.push(this._frames[i].style.opacity = opacity);
      } else {
        this._frames[i].style.visibility = 'hidden';
        this._frames[i].style.zIndex = 0;
        _results.push(this._frames[i].style.opacity = 0);
      }
    }
    return _results;
  };

  return Blender;

})(Sequencer.Player);

if ((typeof exports !== "undefined" && exports !== null) && module && module.exports) {
  module.exports = Sequencer;
} else if (window) {
  window.Sequencer = Sequencer;
}

Sequencer = Sequencer || {};

Sequencer.FrameMode = (function(_super) {
  __extends(FrameMode, _super);

  FrameMode.prototype.id = 'FrameMode';

  FrameMode.prototype.frame = 0;

  function FrameMode(data) {
    this.data = data;
  }

  FrameMode.prototype.update = function() {};

  FrameMode.prototype.set_frame = function(frame) {
    this.frame = frame;
  };

  FrameMode.prototype.get_frame = function() {
    return this.frame;
  };

  FrameMode.prototype.total_frames = function() {
    return this.data.total_frames - 1;
  };

  return FrameMode;

})(Pivot);

Sequencer.LinearMode = (function(_super) {
  __extends(LinearMode, _super);

  LinearMode.prototype.id = 'Linear';

  LinearMode.prototype.frame = 0;

  function LinearMode(data) {
    this.data = data;
    this._complete = __bind(this._complete, this);
    this._update = __bind(this._update, this);
    this.get_frame = __bind(this.get_frame, this);
  }

  LinearMode.prototype.play = function(duration, end_frame, ease) {
    var params;
    if (duration == null) {
      duration = 1;
    }
    if (end_frame == null) {
      end_frame = 1;
    }
    if (ease == null) {
      ease = Linear.easeNone;
    }
    params = {
      frame: end_frame,
      onUpdate: this._update,
      onComplete: this._complete,
      ease: ease
    };
    return this.tween = TweenLite.to(this, duration, params);
  };

  LinearMode.prototype.stop = function() {
    return TweenLite.killTweensOf(this.tween);
  };

  LinearMode.prototype.get_frame = function() {
    var frame;
    frame = Math.floor(this.frame);
    if (frame < 0) {
      frame = 0;
    } else if (frame > this.total_frames()) {
      frame = this.total_frames();
    }
    return frame;
  };

  LinearMode.prototype.total_frames = function() {
    return this.data.total_frames - 1;
  };

  LinearMode.prototype._update = function() {
    return this.trigger('update');
  };

  LinearMode.prototype._complete = function() {
    return this.trigger('complete');
  };

  return LinearMode;

})(Pivot);

Sequencer.RepeatMode = (function(_super) {
  __extends(RepeatMode, _super);

  RepeatMode.prototype.id = 'Linear';

  RepeatMode.prototype.frame = 0;

  RepeatMode.prototype.repeat = 1;

  function RepeatMode(data) {
    this.data = data;
    this._reverse_complete = __bind(this._reverse_complete, this);
    this._complete = __bind(this._complete, this);
    this._update = __bind(this._update, this);
    this.get_frame = __bind(this.get_frame, this);
    this.play = __bind(this.play, this);
  }

  RepeatMode.prototype.play = function(duration, ease) {
    var params;
    this.duration = duration != null ? duration : 1;
    this.ease = ease != null ? ease : Linear.easeNone;
    params = {
      frame: this.total_frames(),
      onUpdate: this._update,
      onComplete: this._complete,
      ease: this.ease,
      repeat: this.repeat
    };
    return TweenMax.to(this, this.duration, params);
  };

  RepeatMode.prototype.stop = function() {
    return TweenLite.killTweensOf(this);
  };

  RepeatMode.prototype.get_frame = function() {
    var frame;
    frame = Math.floor(this.frame);
    if (frame < 0) {
      frame = 0;
    } else if (frame > this.total_frames()) {
      frame = this.total_frames();
    }
    return frame;
  };

  RepeatMode.prototype.total_frames = function() {
    return this.data.total_frames - 1;
  };

  RepeatMode.prototype._update = function() {
    return this.trigger('update');
  };

  RepeatMode.prototype._complete = function() {
    return this.trigger('complete');
  };

  RepeatMode.prototype._reverse_complete = function() {
    this.trigger('reverse_complete');
    return this.tween.play();
  };

  return RepeatMode;

})(Pivot);

Sequencer.SpritesheetPlayer = (function(_super) {
  __extends(SpritesheetPlayer, _super);

  SpritesheetPlayer.prototype.chrome = window.navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

  SpritesheetPlayer.prototype.el = null;

  SpritesheetPlayer.prototype.current_frame = -1;

  SpritesheetPlayer.prototype.spritesheet_index = -1;

  SpritesheetPlayer.prototype.offset_x = 0;

  SpritesheetPlayer.prototype.offset_y = 0;

  SpritesheetPlayer.prototype.mode = null;

  SpritesheetPlayer.prototype.cssbackgroundsize = false;

  SpritesheetPlayer.prototype.dev = true;

  SpritesheetPlayer.prototype.tag_type = 'div';

  SpritesheetPlayer.prototype.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.dev) {
      return console.debug.apply(console, args);
    }
  };

  function SpritesheetPlayer(el) {
    this.update = __bind(this.update, this);
    this.set_size = __bind(this.set_size, this);
    this.set_mode = __bind(this.set_mode, this);
    this.load = __bind(this.load, this);
    this._resize = __bind(this._resize, this);
    this._update = __bind(this._update, this);
    this._setup = __bind(this._setup, this);
    this._load_images = __bind(this._load_images, this);
    this.log = __bind(this.log, this);
    this.el = document.getElementById(el);
    this.el.style.overflow = 'hidden';
  }

  /*
  	Load images from the data
  */


  SpritesheetPlayer.prototype._load_images = function() {
    var ext, file_ext, frame, loaded, loader, on_load_complete, path, total_spritesheets, _i, _j, _len, _ref1, _results,
      _this = this;
    this._cache = [];
    loaded = 0;
    total_spritesheets = this.get_total_spritesheets();
    on_load_complete = function(img) {
      var id;
      if (img.dataset != null) {
        id = img.dataset.frame;
      } else {
        id = img.getAttribute('data-frame');
      }
      _this._cache[id] = img;
      if (loaded === total_spritesheets) {
        _this._setup();
      }
      return loaded++;
    };
    _results = [];
    for (frame = _i = 0; 0 <= total_spritesheets ? _i <= total_spritesheets : _i >= total_spritesheets; frame = 0 <= total_spritesheets ? ++_i : --_i) {
      file_ext = this.data.extensions[0];
      if (this.chrome) {
        _ref1 = this.data.extensions;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          ext = _ref1[_j];
          if (ext === 'webp') {
            file_ext = ext;
          }
        }
      }
      path = this.path + '/' + frame + '.' + file_ext;
      loader = new Sequencer.ImageLoader(path, frame);
      _results.push(loader.on('complete', on_load_complete));
    }
    return _results;
  };

  SpritesheetPlayer.prototype._create_frame = function(src, class_name) {
    var el;
    el = document.createElement('div');
    el.className = class_name;
    el.style.position = 'absolute';
    el.style.width = '100%';
    el.style.height = '100%';
    if (src) {
      el.style.backgroundImage = "url(" + src + ")";
    }
    el.style.backgroundRepeat = "no-repeat";
    el.style.visibility = 'hidden';
    return el;
  };

  /*
  	Setup the container
  */


  SpritesheetPlayer.prototype._setup = function() {
    var el, hd_frame, height, i, img, width, _i, _len, _ref1;
    this.container = document.createElement('div');
    this.container.style.position = 'absolute';
    this.el.appendChild(this.container);
    width = this.data.frame.width * this.data.frame.scale;
    height = this.data.frame.height * this.data.frame.scale;
    this.frame_width = this.data.frame.width;
    this.frame_height = this.data.frame.height;
    this.max_frames_horizontal = Math.round(this.data.width / this.data.frame.width);
    this.max_frames_vertical = Math.round(this.data.height / this.data.frame.height);
    this._frames = [];
    _ref1 = this._cache;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      img = _ref1[i];
      el = this._create_frame(img.src, 'sd_frame');
      this._frames.push(el);
      this.container.appendChild(el);
    }
    this._cache = null;
    hd_frame = this._create_frame('', 'hd_frame');
    this.container.appendChild(hd_frame);
    this._hd_frame = $(hd_frame);
    this.set_size(width, height);
    return this.trigger('setup_complete', this);
  };

  SpritesheetPlayer.prototype._update = function(force) {
    var background_x, background_y, frame, frames_at_index, index, spritesheet_index, tile, x, xpos, y, ypos, _i, _j, _ref1, _ref2;
    if (force == null) {
      force = false;
    }
    frame = this.mode.get_frame();
    spritesheet_index = Math.floor(frame / this.data.frames_per_spritesheet);
    frames_at_index = spritesheet_index * this.data.frames_per_spritesheet;
    tile = frame - frames_at_index;
    index = -1;
    xpos = 0;
    ypos = 0;
    for (y = _i = 0, _ref1 = this.max_frames_vertical; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; y = 0 <= _ref1 ? ++_i : --_i) {
      for (x = _j = 0, _ref2 = this.max_frames_horizontal; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; x = 0 <= _ref2 ? ++_j : --_j) {
        index++;
        if (index === tile) {
          xpos = x;
          ypos = y;
          break;
        }
      }
    }
    background_x = -(xpos * this.frame_width);
    background_y = -(ypos * this.frame_height);
    background_x += this.offset_x;
    background_y += this.offset_y;
    if (frame !== this.current_frame || force) {
      this.hide_hd_frame();
      if (this._frames[this.spritesheet_index] != null) {
        this._frames[this.spritesheet_index].style.visibility = 'hidden';
        this._frames[this.spritesheet_index].style.zIndex = 0;
      }
      this.current_frame = frame;
      this.spritesheet_index = spritesheet_index;
      x = background_x + 'px';
      y = background_y + 'px';
      this._frames[spritesheet_index].style.backgroundPosition = "" + x + " " + y;
      this._frames[spritesheet_index].style.visibility = 'visible';
      return this._frames[spritesheet_index].style.zIndex = 1;
    }
  };

  SpritesheetPlayer.prototype._resize = function() {
    var $window;
    $window = $(window);
    this.set_size($window.width(), $window.height());
    return this._update(true);
  };

  /*----------------------------------------------
  	@public
  */


  SpritesheetPlayer.prototype.load = function(path, frames) {
    var _this = this;
    this.path = path;
    return $.ajax({
      url: this.path + '/' + frames,
      complete: function(data) {
        _this.data = JSON.parse(data.responseText);
        return _this._load_images();
      },
      error: function(error) {}
    });
  };

  SpritesheetPlayer.prototype.noload = function(data, _cache) {
    this.data = data;
    this._cache = _cache;
    return this._setup();
  };

  /*
  	Set the playback mode
  */


  SpritesheetPlayer.prototype.set_mode = function(mode) {
    var _ref1;
    if ((_ref1 = this.mode) != null) {
      _ref1.off('update', this.update);
    }
    this.mode = mode;
    return this.mode.on('update', this.update);
  };

  SpritesheetPlayer.prototype.set_size = function(width, height) {
    var $frames, hd_frame, original_size, prop_h, prop_w, _ref1;
    this.width = width;
    this.height = height;
    this.log('set size', this.width, this.height);
    this.el.style.width = '100%';
    this.el.style.height = '100%';
    this.container.style.width = this.width + 'px';
    this.container.style.height = this.height + 'px';
    $frames = $(this.container).find('.sd_frame');
    hd_frame = $(this.container).find('.hd_frame');
    _ref1 = Sequencer.util.resize_spritesheet($frames, this.data.frame.width, this.data.frame.height, this.width, this.height, this.max_frames_horizontal, this.max_frames_vertical), this.frame_width = _ref1[0], this.frame_height = _ref1[1], this.offset_x = _ref1[2], this.offset_y = _ref1[3];
    this.frame_width = Math.floor(this.frame_width);
    this.frame_height = Math.floor(this.frame_height);
    Sequencer.util.resize(hd_frame, this.data.frame.width, this.data.frame.height, this.width, this.height, true);
    original_size = {
      w: 512,
      h: 288
    };
    prop_w = this.width / original_size.w;
    return prop_h = this.height / original_size.h;
  };

  SpritesheetPlayer.prototype.update = function() {
    if (this.mode == null) {
      return;
    }
    return this._update();
  };

  /*
  	Enable the automatic resizing of the sequencer container on window resize
  */


  SpritesheetPlayer.prototype.enable_automatic_resize = function() {
    $(window).on('resize', this._resize);
    return this._resize();
  };

  /*
  	Disable the automatic resizing of the sequencer container on window resize
  */


  SpritesheetPlayer.prototype.disable_automatic_resize = function() {
    return $(window).off('resize', this._resize);
  };

  /*
  	Show a high quality frame
  	@param [Image] img
  */


  SpritesheetPlayer.prototype.show_hd_frame = function(img) {
    var src;
    src = "url(" + img.src + ")";
    this._hd_frame.css('background-image', src);
    TweenLite.to(this._hd_frame, 0.3, {
      autoAlpha: 1
    });
    return this._hd_frame.css({
      'z-index': 10
    });
  };

  /*
  	Hide the high quality frame
  */


  SpritesheetPlayer.prototype.hide_hd_frame = function() {
    TweenLite.killTweensOf(this._hd_frame);
    return this._hd_frame.css({
      'visibility': 'hidden',
      'opacity': 0,
      'z-index': 0
    });
  };

  /*
  	Return the number of frames in the sequence
  	@return [Int]
  */


  SpritesheetPlayer.prototype.get_total_frames = function() {
    return this.data.total_frames - 1;
  };

  /*
  	Return the number of frames in the sequence
  	@return [Int]
  */


  SpritesheetPlayer.prototype.get_total_spritesheets = function() {
    return this.data.total_spritesheets - 1;
  };

  SpritesheetPlayer.prototype.destroy = function() {
    return this.el.innerHTML = '';
  };

  return SpritesheetPlayer;

})(Pivot);

Sequencer = Sequencer || {};

Sequencer.util = {
  calculate_resize: function(image_width, image_height, win_width, win_height) {
    var image_ratio1, image_ratio2, new_height, new_left, new_top, new_width, window_ratio;
    window_ratio = win_width / win_height;
    image_ratio1 = image_width / image_height;
    image_ratio2 = image_height / image_width;
    if (window_ratio < image_ratio1) {
      new_height = win_height;
      new_width = Math.round(new_height * image_ratio1);
      new_top = 0;
      new_left = (win_width * .5) - (new_width * .5);
    } else {
      new_width = win_width;
      new_height = Math.round(new_width * image_ratio2);
      new_top = (win_height * .5) - (new_height * .5);
      new_left = 0;
    }
    return {
      x: new_left,
      y: new_top,
      width: new_width,
      height: new_height
    };
  },
  /*
  	Resize image(s) to the browser size retaining aspect ratio
  	@param [jQuery]  $images
  	@param [Number]  image_width
  	@param [Number]  image_height
  	@param [Number]  win_width
  	@param [Number]  win_width
  	@param [Boolean] backgroundsize
  */

  resize: function($images, image_width, image_height, win_width, win_height, backgroundsize) {
    var data;
    data = this.calculate_resize(image_width, image_height, win_width, win_height);
    if (backgroundsize) {
      return $images.css({
        'background-size': "" + data.width + "px " + data.height + "px",
        'background-position': "" + data.x + "px " + data.y + "px"
      });
    } else {
      return $images.css({
        'margin-top': "" + data.y + "px",
        'margin-left': "" + data.x + "px",
        'width': "" + data.width + "px",
        'height': "" + data.height + "px"
      });
    }
  },
  resize_spritesheet: function($images, image_width, image_height, win_width, win_height, max_frames_horizontal, max_frames_vertical) {
    var data, size_x, size_y;
    data = this.calculate_resize(image_width, image_height, win_width, win_height);
    size_x = data.width * max_frames_horizontal;
    size_y = data.height * max_frames_vertical;
    $images.css({
      'background-size': "" + size_x + "px " + size_y + "px"
    });
    return [data.width, data.height, data.x, data.y];
  }
};
