// Generated by CoffeeScript 1.6.3
var Pivot, Sequencer, Utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

if ((typeof exports !== "undefined" && exports !== null) && module && module.exports) {
  Pivot = require('the-pivot');
}

Sequencer = Sequencer || {};

Sequencer.ImageLoader = (function(_super) {
  __extends(ImageLoader, _super);

  function ImageLoader(path, frame) {
    var img,
      _this = this;
    img = new Image();
    img.src = path;
    if (img.dataset != null) {
      img.dataset.frame = frame;
    } else {
      img.setAttribute('data-frame', frame);
    }
    img.onload = function() {
      return _this.trigger('complete', img);
    };
  }

  return ImageLoader;

})(Pivot);

Sequencer.Player = (function(_super) {
  __extends(Player, _super);

  Player.prototype.chrome = window.navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

  Player.prototype.el = null;

  Player.prototype.current_frame = true;

  Player.prototype.mode = null;

  Player.prototype.cssbackgroundsize = false;

  Player.prototype.dev = true;

  Player.prototype.tag_type = 'div';

  Player.prototype.counter = 0;

  Player.prototype.is_playing = false;

  Player.prototype.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.dev) {
      return console.log.apply(console, args);
    }
  };

  function Player(el) {
    this.tick = __bind(this.tick, this);
    this.set_frame = __bind(this.set_frame, this);
    this.set_size = __bind(this.set_size, this);
    this.set_mode = __bind(this.set_mode, this);
    this.stop = __bind(this.stop, this);
    this.play = __bind(this.play, this);
    this.load = __bind(this.load, this);
    this._update = __bind(this._update, this);
    this._setup = __bind(this._setup, this);
    this._load_images = __bind(this._load_images, this);
    this.log = __bind(this.log, this);
    this.el = document.getElementById(el);
    this.container = document.createElement('div');
    this.container.style.position = 'absolute';
    this.el.appendChild(this.container);
  }

  /*
  	Load images from the data
  */


  Player.prototype._load_images = function() {
    var ext, file_ext, frame, loaded, loader, on_load_complete, path, total_frames, _i, _j, _len, _ref, _results,
      _this = this;
    this._cache = [];
    loaded = 0;
    total_frames = this.get_total_frames();
    on_load_complete = function(img) {
      var id;
      if (img.dataset != null) {
        id = img.dataset.frame;
      } else {
        id = img.getAttribute('data-frame');
      }
      _this._cache[id] = img;
      if (loaded === total_frames) {
        _this._setup();
      }
      return loaded++;
    };
    _results = [];
    for (frame = _i = 0; 0 <= total_frames ? _i <= total_frames : _i >= total_frames; frame = 0 <= total_frames ? ++_i : --_i) {
      file_ext = this.data.extensions[0];
      if (this.chrome) {
        _ref = this.data.extensions;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          ext = _ref[_j];
          if (ext === 'webp') {
            file_ext = ext;
          }
        }
      }
      path = this.path + '/' + frame + '.' + file_ext;
      loader = new Sequencer.ImageLoader(path, frame);
      _results.push(loader.on('complete', on_load_complete));
    }
    return _results;
  };

  /*
  	Setup the container
  */


  Player.prototype._setup = function() {
    var el, height, i, img, width, _i, _len, _ref;
    width = this.data.frame.width * this.data.frame.scale;
    height = this.data.frame.height * this.data.frame.scale;
    this._frames = [];
    _ref = this._cache;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      img = _ref[i];
      if (this.cssbackgroundsize) {
        el = document.createElement('div');
        el.style.position = 'absolute';
        el.style.width = '100%';
        el.style.height = '100%';
        el.style.backgroundImage = "url(" + img.src + ")";
        el.style.backgroundRepeat = "no-repeat";
        el.style.visibility = 'hidden';
      } else {
        img.style.position = 'absolute';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.visibility = 'hidden';
        this.tag_type = 'img';
        el = img;
      }
      this._frames.push(el);
      this.container.appendChild(el);
    }
    this._cache = null;
    this.set_size(width, height);
    return this.trigger('setup_complete', this);
  };

  Player.prototype._update = function() {
    var frame;
    frame = this.mode.get_frame();
    if (frame !== this.current_frame) {
      if (this._frames[this.current_frame] != null) {
        this._frames[this.current_frame].style.visibility = 'hidden';
        this._frames[this.current_frame].style.zIndex = 0;
      }
      this.current_frame = frame;
      this._frames[this.current_frame].style.visibility = 'visible';
      return this._frames[this.current_frame].style.zIndex = 1;
    }
  };

  /*
  	Validate the new frame
  	@return [Int]
  */


  Player.prototype._validate_frame = function() {
    var frame;
    frame = this.mode.get_frame();
    if (frame < 0) {
      this._frame = 0;
      console.warn('Frame is less than 0');
      return this.stop();
    } else if (frame > this.get_total_frames()) {
      this._frame = this.get_total_frames();
      console.warn("Frame is greater than total frames, stopping at " + (this.get_total_frames()));
      return this.stop();
    }
  };

  /*----------------------------------------------
  	@public
  */


  Player.prototype.load = function(path, frames) {
    var _this = this;
    this.path = path;
    return $.ajax({
      url: this.path + '/' + frames,
      complete: function(data) {
        _this.data = JSON.parse(data.responseText);
        return _this._load_images();
      },
      error: function(error) {}
    });
  };

  Player.prototype.noload = function(data, _cache) {
    this.data = data;
    this._cache = _cache;
    return this._setup();
  };

  /*
  	Start playback on the current mode
  */


  Player.prototype.play = function() {
    if (this.is_playing) {
      return;
    }
    this.date = new Date();
    if (this.mode == null) {
      return console.warn('Error --> Set a playback mode first');
    } else {
      this.log('play at speed', this.mode.speed);
      bs.ticker.on('tick', this.tick);
      return this.is_playing = true;
    }
  };

  /*
  	Stop playback on the current mode
  */


  Player.prototype.stop = function() {
    if (!this.is_playing) {
      return;
    }
    this.log("stop--->", (new Date - this.date) / 1000);
    bs.ticker.off('tick', this.tick);
    return this.is_playing = false;
  };

  /*
  	Set the playback mode
  */


  Player.prototype.set_mode = function(mode) {
    var _ref;
    if ((_ref = this.mode) != null) {
      _ref.off('complete', this.stop);
    }
    this.mode = mode;
    return this.mode.on('complete', this.stop);
  };

  Player.prototype.set_size = function(width, height) {
    var $frames;
    this.width = width;
    this.height = height;
    this.el.style.width = this.width + 'px';
    this.el.style.height = this.height + 'px';
    this.container.style.width = this.el.style.width;
    this.container.style.height = this.el.style.height;
    $frames = $(this.container).find(this.tag_type);
    return Utils.resize($frames, this.data.frame.width, this.data.frame.height, this.width, this.height, this.cssbackgroundsize);
  };

  Player.prototype.set_frame = function(frame) {};

  Player.prototype.tick = function() {
    if (this.mode == null) {
      return;
    }
    this.mode.update();
    this._validate_frame();
    this._update();
    return this.counter++;
  };

  /*
  	Return the number of frames in the sequence
  	@return [Int]
  */


  Player.prototype.get_total_frames = function() {
    return this.data.total_frames - 1;
  };

  Player.prototype.destroy = function() {
    this.stop();
    return this.el.innerHTML = '';
  };

  return Player;

})(Pivot);

/*----------------------------------------------
Playback modes
*/


/*
Frame mode

Manually set the frame of the sequence
*/


Sequencer.FrameMode = (function(_super) {
  __extends(FrameMode, _super);

  FrameMode.prototype.id = 'FrameMode';

  FrameMode.prototype.frame = 0;

  function FrameMode(data) {
    this.data = data;
  }

  FrameMode.prototype.update = function() {};

  FrameMode.prototype.set_frame = function(frame) {
    this.frame = frame;
  };

  FrameMode.prototype.get_frame = function() {
    return this.frame;
  };

  return FrameMode;

})(Pivot);

/*
Linear mode

Repeats the animation from frame 0 once it reaches the end
*/


Sequencer.LinearMode = (function(_super) {
  __extends(LinearMode, _super);

  LinearMode.prototype.id = 'Linear';

  LinearMode.prototype.frame = 0;

  LinearMode.prototype.speed = 1;

  function LinearMode(data) {
    this.data = data;
  }

  LinearMode.prototype.update = function() {
    return this._set_frame();
  };

  LinearMode.prototype._set_frame = function() {
    if (this.frame >= this.data.total_frames - 1) {
      return this.trigger('complete');
    } else {
      return this.frame += this.speed;
    }
  };

  LinearMode.prototype.get_frame = function() {
    return Math.floor(this.frame);
  };

  return LinearMode;

})(Pivot);

/*
RepeatMode

Repeats the animation from frame 0 once it reaches the end
*/


Sequencer.RepeatMode = (function(_super) {
  __extends(RepeatMode, _super);

  RepeatMode.prototype.id = 'Repeat';

  RepeatMode.prototype.frame = 0;

  RepeatMode.prototype.speed = 1;

  function RepeatMode(data) {
    this.data = data;
  }

  RepeatMode.prototype.update = function() {
    return this._set_frame();
  };

  RepeatMode.prototype._set_frame = function() {
    if (this.frame >= this.data.total_frames - 1) {
      this.frame = 0;
    }
    return this.frame += this.speed;
  };

  RepeatMode.prototype.get_frame = function() {
    return Math.floor(this.frame);
  };

  return RepeatMode;

})(Pivot);

/*
ReverseMode

Plays the animation back and forth
*/


Sequencer.ReverseMode = (function(_super) {
  __extends(ReverseMode, _super);

  ReverseMode.prototype.id = 'Reverse';

  ReverseMode.prototype.frame = 0;

  ReverseMode.prototype.speed = 1;

  function ReverseMode(data) {
    this.data = data;
  }

  ReverseMode.prototype.update = function() {
    return this._set_frame();
  };

  ReverseMode.prototype._set_frame = function() {
    if (this.frame >= this.data.total_frames - 1) {
      this.frame = -Math.abs(this.speed);
    }
    if (this.frame <= 0) {
      Math.abs(this.speed);
    }
    return this.frame += this.speed;
  };

  ReverseMode.prototype.get_frame = function() {
    return Math.floor(this.frame);
  };

  return ReverseMode;

})(Pivot);

/*----------------------------------------------
Utils
*/


Utils = {
  calculate_resize: function(image_width, image_height, win_width, win_height, backgroundsize) {
    var image_ratio1, image_ratio2, new_height, new_left, new_top, new_width, window_ratio;
    window_ratio = win_width / win_height;
    image_ratio1 = image_width / image_height;
    image_ratio2 = image_height / image_width;
    if (window_ratio < image_ratio1) {
      new_height = win_height;
      new_width = new_height * image_ratio1;
      new_top = 0;
      new_left = (win_width * .5) - (new_width * .5);
    } else {
      new_width = win_width;
      new_height = new_width * image_ratio2;
      new_top = (win_height * .5) - (new_height * .5);
      new_left = 0;
    }
    return {
      x: new_left,
      y: new_top,
      width: new_width,
      height: new_height
    };
  },
  /*
  	Resize image(s) to the browser size retaining aspect ratio
  	@param [jQuery]  $images
  	@param [Number]  image_width
  	@param [Number]  image_height
  	@param [Number]  win_width
  	@param [Number]  win_width
  	@param [Boolean] backgroundsize
  */

  resize: function($images, image_width, image_height, win_width, win_height, backgroundsize) {
    var data;
    data = this.calculate_resize(image_width, image_height, win_width, win_height, backgroundsize);
    if (backgroundsize) {
      return $images.css({
        'background-size': "" + data.width + "px " + data.height + "px",
        'background-position': "" + data.x + "px " + data.y + "px"
      });
    } else {
      return $images.css({
        'margin-top': "" + data.y + "px",
        'margin-left': "" + data.x + "px",
        'width': "" + data.width + "px",
        'height': "" + data.height + "px"
      });
    }
  }
};

if ((typeof exports !== "undefined" && exports !== null) && module && module.exports) {
  module.exports = Sequencer;
} else if (window) {
  window.Sequencer = Sequencer;
}
