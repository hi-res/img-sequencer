// Generated by CoffeeScript 1.6.3
var Sequencer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

window.requestAnimFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

Sequencer = Sequencer || {};

Sequencer.ImageLoader = (function() {
  function ImageLoader(path, frame, callback) {
    var img,
      _this = this;
    img = new Image();
    img.src = path;
    img.dataset.frame = frame;
    img.onload = function() {
      return callback(img);
    };
  }

  return ImageLoader;

})();

Sequencer.Player = (function(_super) {
  __extends(Player, _super);

  Player.prototype.pixel_ratio = window.devicePixelRatio;

  Player.prototype.retina = window.devicePixelRatio === 2;

  Player.prototype.chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

  Player.prototype.el = null;

  Player.prototype.current_frame = null;

  Player.prototype.mode = null;

  Player.prototype.dev = true;

  Player.prototype.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.dev) {
      return console.log.apply(console, args);
    }
  };

  function Player(el) {
    this.tick = __bind(this.tick, this);
    this.set_frame = __bind(this.set_frame, this);
    this.set_mode = __bind(this.set_mode, this);
    this.stop = __bind(this.stop, this);
    this.play = __bind(this.play, this);
    this.load = __bind(this.load, this);
    this._update = __bind(this._update, this);
    this._setup = __bind(this._setup, this);
    this._load_images = __bind(this._load_images, this);
    this.log = __bind(this.log, this);
    var animloop,
      _this = this;
    this.el = document.getElementById(el);
    this.container = document.createElement('div');
    this.container.style.position = 'absolute';
    this.el.appendChild(this.container);
    (animloop = function() {
      window.requestAnimFrame(animloop);
      return _this.trigger('tick');
    })();
  }

  /*
  	Load images from the data
  */


  Player.prototype._load_images = function() {
    var counter, ext, file_ext, frame, loader, on_load_complete, path, total_frames, _i, _j, _len, _ref, _results,
      _this = this;
    this._cache = [];
    counter = 0;
    total_frames = this.data.total_frames;
    on_load_complete = function(img) {
      counter++;
      if (counter === total_frames) {
        _this._setup();
      }
      return _this._cache[img.dataset.frame] = img;
    };
    _results = [];
    for (frame = _i = 0; 0 <= total_frames ? _i < total_frames : _i > total_frames; frame = 0 <= total_frames ? ++_i : --_i) {
      if (this.chrome) {
        _ref = this.data.extensions;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          ext = _ref[_j];
          if (ext === 'webp') {
            file_ext = ext;
          }
        }
      } else {
        file_ext = this.data.extensions[0];
      }
      path = this.path + '/' + frame + '.' + file_ext;
      _results.push(loader = new Sequencer.ImageLoader(path, frame, on_load_complete));
    }
    return _results;
  };

  /*
  	Setup the container
  */


  Player.prototype._setup = function() {
    var img, scale, _i, _len, _ref;
    scale = (this.retina === true ? 0.5 : 1);
    this.width = this.data.frame.width * scale;
    this.height = this.data.frame.height * scale;
    this.width *= this.data.frame.scale;
    this.height *= this.data.frame.scale;
    this.el.style.width = this.width + 'px';
    this.el.style.height = this.height + 'px';
    this.container.style.width = this.el.style.width;
    this.container.style.height = this.el.style.height;
    _ref = this._cache;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      img = _ref[_i];
      img.style.position = 'absolute';
      img.style.width = '100%';
      img.style.height = '100%';
      this.container.appendChild(img);
    }
    return this.trigger('setup_complete');
  };

  Player.prototype._update = function() {
    var frame;
    frame = this.mode.get_frame();
    if (frame !== this.current_frame) {
      if (this._cache[this.current_frame] != null) {
        this._cache[this.current_frame].style.visibility = 'hidden';
        this._cache[this.current_frame].style.zIndex = 0;
      }
      this.current_frame = frame;
      this._cache[this.current_frame].style.visibility = 'visible';
      return this._cache[this.current_frame].style.zIndex = 1;
    }
  };

  /*
  	Validate the new frame
  	@return [Int]
  */


  Player.prototype._validate_frame = function() {
    var frame;
    frame = this.mode.get_frame();
    if (frame < 0) {
      this._frame = 0;
      console.warn('Frame is less than 0');
      return this.stop();
    } else if (frame > this.get_total_frames()) {
      this._frame = this.get_total_frames();
      console.warn("Frame is greater than total frames, stopping at " + (this.get_total_frames()));
      return this.stop();
    }
  };

  /*----------------------------------------------
  	@public
  */


  Player.prototype.load = function(path, frames) {
    var _this = this;
    this.path = path;
    return $.ajax({
      url: this.path + '/' + frames,
      complete: function(data) {
        _this.data = data.responseJSON;
        return _this._load_images();
      },
      error: function(error) {
        return _this.log(error);
      }
    });
  };

  /*
  	Start playback on the current mode
  */


  Player.prototype.play = function() {
    if (this.mode == null) {
      return console.warn('Error --> Set a playback mode first');
    } else {
      this.log('play');
      return this.on('tick', this.tick);
    }
  };

  /*
  	Stop playback on the current mode
  */


  Player.prototype.stop = function() {
    this.log('stop');
    return this.off('tick', this.tick);
  };

  /*
  	Set the playback mode
  */


  Player.prototype.set_mode = function(mode) {
    var _ref;
    if ((_ref = this.mode) != null) {
      _ref.off('complete', this.stop);
    }
    this.mode = mode;
    this.log('setting mode -->', this.mode.id);
    return this.mode.on('complete', this.stop);
  };

  Player.prototype.set_frame = function(frame) {};

  Player.prototype.tick = function() {
    this.mode.update();
    this._validate_frame();
    return this._update();
  };

  /*
  	Return the number of frames in the sequence
  	@return [Int]
  */


  Player.prototype.get_total_frames = function() {
    return this.data.total_frames - 1;
  };

  return Player;

})(Pivot);

/*----------------------------------------------
Playback modes
*/


/*
Frame mode

Manually set the frame of the sequence
*/


Sequencer.FrameMode = (function(_super) {
  __extends(FrameMode, _super);

  FrameMode.prototype.id = 'FrameMode';

  FrameMode.prototype.frame = 0;

  function FrameMode(data) {
    this.data = data;
  }

  FrameMode.prototype.update = function() {};

  FrameMode.prototype.set_frame = function(frame) {
    this.frame = frame;
  };

  FrameMode.prototype.get_frame = function() {
    return this.frame;
  };

  return FrameMode;

})(Pivot);

/*
Linear mode

Repeats the animation from frame 0 once it reaches the end
*/


Sequencer.LinearMode = (function(_super) {
  __extends(LinearMode, _super);

  LinearMode.prototype.id = 'Linear';

  LinearMode.prototype.frame = 0;

  function LinearMode(data) {
    this.data = data;
  }

  LinearMode.prototype.update = function() {
    return this._set_frame();
  };

  LinearMode.prototype._set_frame = function() {
    if (this.frame >= this.data.total_frames - 1) {
      return this.trigger('complete');
    } else {
      return this.frame++;
    }
  };

  LinearMode.prototype.get_frame = function() {
    return this.frame;
  };

  return LinearMode;

})(Pivot);

/*
RepeatMode

Repeats the animation from frame 0 once it reaches the end
*/


Sequencer.RepeatMode = (function(_super) {
  __extends(RepeatMode, _super);

  RepeatMode.prototype.id = 'Repeat';

  RepeatMode.prototype.frame = 0;

  RepeatMode.prototype.speed = 1;

  function RepeatMode(data) {
    this.data = data;
  }

  RepeatMode.prototype.update = function() {
    return this._set_frame();
  };

  RepeatMode.prototype._set_frame = function() {
    if (this.frame >= this.data.total_frames - 1) {
      this.frame = 0;
    }
    return this.frame++;
  };

  RepeatMode.prototype.get_frame = function() {
    return this.frame;
  };

  return RepeatMode;

})(Pivot);

/*
ReverseMode

Plays the animation back and forth
*/


Sequencer.ReverseMode = (function(_super) {
  __extends(ReverseMode, _super);

  ReverseMode.prototype.id = 'Reverse';

  ReverseMode.prototype.frame = 0;

  ReverseMode.prototype.speed = 1;

  function ReverseMode(data) {
    this.data = data;
  }

  ReverseMode.prototype.update = function() {
    return this._set_frame();
  };

  ReverseMode.prototype._set_frame = function() {
    if (this.frame >= this.data.total_frames - 1) {
      this.frame = -Math.abs(this.speed);
    }
    if (this.frame <= 0) {
      Math.abs(this.speed);
    }
    return this.frame += this.speed;
  };

  ReverseMode.prototype.get_frame = function() {
    return this.frame;
  };

  return ReverseMode;

})(Pivot);

if ((typeof exports !== "undefined" && exports !== null) && module && module.exports) {
  exports.Sequencer = Sequencer;
} else if (window) {
  window.Sequencer = Sequencer;
}
