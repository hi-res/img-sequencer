// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Sequencer.Blender = (function(_super) {
  __extends(Blender, _super);

  Blender.prototype.pixel_ratio = window.devicePixelRatio;

  Blender.prototype.retina = window.devicePixelRatio === 2;

  Blender.prototype.chrome = window.navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

  Blender.prototype.el = null;

  Blender.prototype.current_frame = true;

  Blender.prototype.mode = null;

  Blender.prototype.cssbackgroundsize = false;

  Blender.prototype.dev = true;

  Blender.prototype.tag_type = 'div';

  Blender.prototype.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.dev) {
      return console.log.apply(console, args);
    }
  };

  function Blender(el) {
    this.tick = __bind(this.tick, this);
    this.set_size = __bind(this.set_size, this);
    this.set_mode = __bind(this.set_mode, this);
    this.load = __bind(this.load, this);
    this._update = __bind(this._update, this);
    this._setup = __bind(this._setup, this);
    this._load_images = __bind(this._load_images, this);
    this.log = __bind(this.log, this);
    var animloop,
      _this = this;
    this.el = document.getElementById(el);
    this.container = document.createElement('div');
    this.container.style.position = 'absolute';
    this.el.appendChild(this.container);
    (animloop = function() {
      window.requestAnimFrame(animloop);
      return _this.trigger('tick');
    })();
  }

  /*
  	Load images from the data
  */


  Blender.prototype._load_images = function() {
    var ext, file_ext, frame, loaded, loader, on_load_complete, path, total_frames, _i, _j, _len, _ref, _results,
      _this = this;
    this._cache = [];
    loaded = 0;
    total_frames = this.get_total_frames();
    on_load_complete = function(img) {
      var id;
      if (img.dataset != null) {
        id = img.dataset.frame;
      } else {
        id = img.getAttribute('data-frame');
      }
      _this._cache[id] = img;
      if (loaded === total_frames) {
        _this._setup();
      }
      return loaded++;
    };
    _results = [];
    for (frame = _i = 0; 0 <= total_frames ? _i <= total_frames : _i >= total_frames; frame = 0 <= total_frames ? ++_i : --_i) {
      file_ext = this.data.extensions[0];
      if (this.chrome) {
        _ref = this.data.extensions;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          ext = _ref[_j];
          if (ext === 'webp') {
            file_ext = ext;
          }
        }
      }
      path = this.path + '/' + frame + '.' + file_ext;
      loader = new Sequencer.ImageLoader(path, frame);
      _results.push(loader.on('complete', on_load_complete));
    }
    return _results;
  };

  /*
  	Setup the container
  */


  Blender.prototype._setup = function() {
    var el, height, i, img, scale, width, _i, _len, _ref;
    scale = (this.retina === true ? 0.5 : 1);
    width = this.data.frame.width * scale;
    height = this.data.frame.height * scale;
    this._frames = [];
    _ref = this._cache;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      img = _ref[i];
      if (this.cssbackgroundsize) {
        el = document.createElement('div');
        el.style.position = 'absolute';
        el.style.width = '100%';
        el.style.height = '100%';
        el.style.backgroundImage = "url(" + img.src + ")";
        el.style.backgroundRepeat = "no-repeat";
        el.style.visibility = 'hidden';
      } else {
        img.style.position = 'absolute';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.visibility = 'hidden';
        this.tag_type = 'img';
        el = img;
      }
      this._frames.push(el);
      this.container.appendChild(el);
    }
    this._cache = null;
    this.set_size(width, height);
    return this.trigger('setup_complete', this);
  };

  Blender.prototype._update = function() {
    var distance, dx, frame, i, normalise, opacity, percent, position, _i, _ref, _results;
    frame = this.mode.get_frame();
    percent = frame / this.get_total_frames();
    percent = Number(percent.toFixed(2));
    _results = [];
    for (i = _i = 0, _ref = this.get_total_frames(); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      position = i * (1 / this.get_total_frames());
      dx = percent - position;
      distance = Math.sqrt(dx * dx);
      if (distance <= 0.1) {
        normalise = distance * 10;
        opacity = 1 - normalise;
        this._frames[i].style.visibility = 'visible';
        this._frames[i].style.zIndex = 1;
        _results.push(this._frames[i].style.opacity = opacity);
      } else {
        this._frames[i].style.visibility = 'hidden';
        _results.push(this._frames[i].style.zIndex = 0);
      }
    }
    return _results;
  };

  /*
  	Validate the new frame
  	@return [Int]
  */


  Blender.prototype._validate_frame = function() {
    var frame;
    frame = this.mode.get_frame();
    if (frame < 0) {
      this._frame = 0;
      console.warn('Frame is less than 0');
      return this.stop();
    } else if (frame > this.get_total_frames()) {
      this._frame = this.get_total_frames();
      console.warn("Frame is greater than total frames, stopping at " + (this.get_total_frames()));
      return this.stop();
    }
  };

  /*----------------------------------------------
  	@public
  */


  Blender.prototype.load = function(path, frames) {
    var _this = this;
    this.path = path;
    return $.ajax({
      url: this.path + '/' + frames,
      complete: function(data) {
        _this.data = JSON.parse(data.responseText);
        return _this._load_images();
      },
      error: function(error) {}
    });
  };

  Blender.prototype.noload = function(data, frames) {
    var i, img, _i, _len, _ref;
    this.data = data;
    this._cache = [];
    _ref = frames.images;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      img = _ref[i];
      this._cache[i] = img.tag;
    }
    return this._setup();
  };

  /*
  	Set the playback mode
  */


  Blender.prototype.set_mode = function(mode) {
    var _ref;
    if ((_ref = this.mode) != null) {
      _ref.off('complete', this.stop);
    }
    this.mode = mode;
    this.log('setting mode -->', this.mode.id);
    return this.mode.on('complete', this.stop);
  };

  Blender.prototype.set_size = function(width, height) {
    var $frames;
    this.width = width;
    this.height = height;
    this.el.style.width = this.width + 'px';
    this.el.style.height = this.height + 'px';
    this.container.style.width = this.el.style.width;
    this.container.style.height = this.el.style.height;
    $frames = $(this.container).find(this.tag_type);
    return Utils.resize($frames, this.data.frame.width, this.data.frame.height, this.width, this.height, this.cssbackgroundsize);
  };

  Blender.prototype.tick = function() {
    this.mode.update();
    this._validate_frame();
    return this._update();
  };

  /*
  	Return the number of frames in the sequence
  	@return [Int]
  */


  Blender.prototype.get_total_frames = function() {
    return this.data.total_frames - 1;
  };

  Blender.prototype.destroy = function() {
    this.stop();
    return this.el.innerHTML = '';
  };

  return Blender;

})(Pivot);
